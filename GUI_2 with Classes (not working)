from tkinter import *
from tkinter import filedialog
from collections import defaultdict
from tkinter.filedialog import askopenfilename
from itertools import *
from functools import partial


class DataProcessor():
    def openfile2():
        global files
        files = open('brca1 gene text acgt.txt', mode='r')
        print(files)

    def printData(self):
        for line in files:
            dna_file = line.rstrip("\n")
            length = len(files)
            for char in line:
                freq = []
                g = 0
                c = 0
                a = 0
                t = 0
                # i want to append the index as a key to freq and then add the gc as it's value
                if char == g:
                    g += 1
                if char == c:
                    c += 1
                if char == a:
                    a += 1
                if char == t:
                    t += 1
                gc = g + c
                freq.append(gc)
                print(freq)

    
    def acgt_count():
        #set files to zero
        g=0
        a=0
        c=0
        t=0

        #skip the first line of header


        #fp = file.readlines()

        for line in files:
            line = line.lower()
            for char in line:
                if char == "g":
                    g+=1
                if char == "a":
                    a+=1
                if char == "c":
                    c+=1
                if char == "t":
                    t+=1
        label2 = Label(text="number of g's " + str(g)).place(x=10, y=200)
        label3 = Label(text="number of c's " + str(c)).place(x=10, y=240)
        label4 = Label(text="number of a's " + str(a)).place(x=10, y=280)
        label5 = Label(text="number of t's " + str(t)).place(x=10, y=320)
        # 0. = convert to floating point
        gc = (g+c+0.) / (a+t+c+g+0.)
        label6 = Label(text="gc content: " + str(gc)).place(x=10, y=340)
        return




class Window(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.master = master
        self.init_window()

    def processData(FILE_NAME):
        # Open the file, and read BYTES_TO_READ amount
        # at a time, until the end of the file.
        with open(FILE_NAME) as file:
            keepReading = True

            while keepReading:
                # We read BYTES_TO_READ amount of bytes from the file. (This includes newline characters)
                # file.read(BYTES_TO_READ) might return 1 of the following:
                #   -Exactly BYTES_TO_READ amount of string data if so much is available to read.
                #   -Less than BYTES_TO_READ amount of string data if we are close to the end of
                #       the file and there are less than BYTES_TO_READ bytes available to be read.
                #   -An empty string "" if the end of the file has been reached.
                data = file.read(BYTES_TO_READ)
                for char in data:
                    gcount = data.count('g')
                    ccount = data.count('c')
                    gcountlist = []
                    gcountlist.append(gcount)
                    ccountlist = []
                    ccountlist.append(ccount)
                    print(gcountlist)
                    print(ccountlist)

                if not data:
                    keepReading = False
                else:
                    printData(data)

                #maxgc = max(freq)
                #mingc = min(freq)
                #fioutput = Label(text="Lowest and highest gc concentration within a 1000 nucleotide span" + str(freq())).place(x=10, y=110)
                #fioutput = Label(text="Lowest and highest gc concentration within a 1000 nucleotide span" + str(freq())).place(x=10, y=110)

    #Creation of init_window
    def init_window(self):
        # changing the title of our master widget
        self.master.title("GUI")

        # allowing the widget to take the full space of the root window
        self.pack(fill=BOTH, expand=1)
        #opens file dialog for file selection on button click
        #need to figure out how to call the chosen file later in acgt_count
        filesearchbutton = Button(self, text="File Open", command=openfile2())
        filesearchbutton.place(x=10, y=120)

        # Constant for the file name.
        FILE_NAME = "brca1 gene text acgt.txt"

        # 1 char = 1 byte
        BYTES_TO_READ = 1000

        # Helper function which processes the data (string) we pass to it.
        okayButton = Button(text="Run With text genome", command=lambda: acgt_count())
        okayButton.place(x=10, y=100)
        rungcbutton = Button(text="Run gc", command=lambda: get_gc())
        rungcbutton.place(x=10, y=146)

        #runfilebutton = Button(text="Run text file", command=open_file)
        #runfilebutton.place(x=10, y=160)

root = Tk()

#size of the window
root.geometry("400x300")

app = Window(root)
root.mainloop()
