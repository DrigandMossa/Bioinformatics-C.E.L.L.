import tkinter as tk
from tkinter import ttk
from collections import defaultdict
from tkinter import *
import bs4 as bs
import urllib.request
from tkinter import filedialog
import json
from tkinter.filedialog import askopenfilename





def openfile1(event=None):
    global filename
    global open_file
    filename = filedialog.askopenfilename()
    #filename2 = filename.decode('iso-8859-1').encode('utf8')
    open_file = open(filename, mode='r', encoding='utf-8-sig')
    print('Selected:', filename)
    return open_file



def openmotif (event=None):
    global open_motif
    global motifname
    motifname = filedialog.askopenfilename()
    open_motif = open(motifname, mode='r', encoding='utf-8-sig')
    print('Selected:', motifname)
    return open_motif




#master widget
master = tk.Tk()
frame = Frame(master)
frame.pack()

#notebook widget
nb = ttk.Notebook(master)
nb.pack(expand=1, fill='both')

#make first tab
f1 = tk.Frame(nb)
#add the tab
nb.add(f1, text="First Tab")
#add text label
gene1lbl = Label(f1, text='NC_000017.11:c43125364-43044295 Homo sapiens chromosome 17, GRCh38.p13 Primary Assembly')
gene1lbl.pack(side=LEFT)



#make the second tab
f2 = tk.Frame(nb)
#add the tab
nb.add(f2, text="Second Tab")
#add label to tab
lbl1 = Label(f2, text='label 1')
lbl1.pack()

#make the third tab
f3 = tk.Frame(nb)
#add the tab
nb.add(f3, text="Third Tab")
#add label to tab
lbl2 = Label(f3, text=str()).pack()

def gene1function(event=NONE):
    source = urllib.request.urlopen('https://www.ncbi.nlm.nih.gov/sviewer/viewer.fcgi?id=568815581&db=nuccore&report=fasta&extrafeat=null&conwithfeat=on&hide-cdd=on&from=43044295&to=43125364&strand=on&retmode=html&withmarkup=on&tool=portal&log$=seqview&maxdownloadsize=1000000')
    soup = bs.BeautifulSoup(source, features="html.parser")
    #fileName = filedialog.asksaveasfilename(parent=master, title="Save file as...")
    with tk.filedialog.asksaveasfile() as f:
        f.write(repr(soup))
    print(soup.get_text())


# add button for download of string
gene1button = Button(f1, text="Download", command=lambda: gene1function())
gene1button.pack(side=LEFT)

nb.select(f1)

nb.enable_traversal()

topframe = Frame(master)
topframe.pack(side=TOP)


bottomframe = Frame(master)
bottomframe.pack(side=BOTTOM)

def motif_index():
    Genome = open_file.read()
    Pattern = open_motif.read()
    k = len(Pattern)
    t = len(Genome)
    starting_points = [i for i in range(t - k + 1) if Genome[i:(i + k)] == Pattern]
    print(Genome)
    print(Pattern)
    labelfindmotifindex = Label(text="Indexes of the motif within file: " + str(starting_points)).pack(side=LEFT)
    return starting_points
    print(motif_index())

#get's gc percetage and index of gcmin and gcmax from freq list
def get_gc():
    g = 0
    c = 0
    a = 0
    t = 0
    freq = []
    for line in open_file:
        dna_file = line.rstrip("\n")
        length = len(dna_file)
        for char in line:
            # is it only doing the first character of every line?

            # i want to append the index as a key to freq and then add the gc as it's value
            if char == "g":
                g += 1
            if char == "c":
                c += 1
            if char == "a":
                a += 1
            if char == "t":
                t += 1
                gc = (g + c + 0.) / (a + t + c + g + 0.)
                freq.append(gc)
                gcmin = min(freq)
                gcmax = max(freq)
                gcminindex = freq.index(gcmin)
                gcmaxindex = freq.index(gcmax)

    label18 = Label(frame, text="number of g's " + str(g)).pack(side=TOP)
    label19 = Label(frame, text="number of c's " + str(c)).pack(side=TOP)
    label20 = Label(frame, text="number of a's " + str(a)).pack(side=TOP)
    label21 = Label(frame, text="number of t's " + str(t)).pack(side=TOP)
    label17 = Label(frame, text="gc content: " + str(gc)).pack(side=TOP)
    label22 = Label(frame, text="gc min: " + str(gcmin)).pack(side=TOP)
    label22 = Label(frame, text="gc max: " + str(gcmax)).pack(side=TOP)
    label23 = Label(frame, text="gc max index: " + str(gcmaxindex)).pack(side=TOP)
    label24 = Label(frame, text="gc min index: " + str(gcminindex)).pack(side=TOP)
    return




#finds the motif at specified amounts of allowable error and length
def FrequentWordsWithMismatches(g, k, d): #class this?
 #g is genome
 #k is length
 #d is number of allowable error

    patcount = defaultdict(int)
    alphabet = "ACGT"
    allbut = {ch: tuple(c for c in alphabet if c != ch)
              for ch in alphabet}

    def inner(i, rd):
        if not rd or i == k:
            patcount["".join(base)] += 1
            return
        inner(i+1, rd)
        orig = base[i]
        for base[i] in allbut[orig]:
            inner(i+1, rd-1)
        base[i] = orig

    for i in range(len(g) - k + 1):
        base = list(g[i : i + k])
        inner(0, d)

    maxcount = max(patcount.values())
    return [p for p, c in patcount.items() if c == maxcount]

print(FrequentWordsWithMismatches('AAAAAAAAAA', 2, 1))

#def freqwordholdings():






#is required to exist in order for openfile1 to work? this is so weird
filesearchbutton = tk.Button(frame, text="File Open", command=openfile1)
filesearchbutton.pack(side=TOP)

#for the motif file
motiffilesearchbutton = tk.Button(frame, text="Motif File", command=openmotif)
motiffilesearchbutton.pack(side=TOP)


#this runs the get_gc function and actually works
rungcbutton = Button(bottomframe, text="Run gc", command=lambda: get_gc())
rungcbutton.pack(side=LEFT)


#test2 for the run motif button
runmotifbuttontest2 = Button(bottomframe, text="Run motif search", command=lambda: motif_index())
runmotifbuttontest2.pack(side=LEFT)


master.mainloop()
