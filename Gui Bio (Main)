import tkinter as tk
import re
from collections import defaultdict
from tkinter import *
from tkinter import filedialog
from tkinter.filedialog import askopenfilename


def openfile1(event=None):
    global filename
    global open_file
    filename = filedialog.askopenfilename()
    open_file = open(filename, mode='r', encoding="ISO-8859-1")
    print('Selected:', filename)



def openmotif (event=None):
    global open_motif
    global motifname
    motifname = filedialog.askopenfilename()
    open_motif = open(motifname, mode='r', encoding="ISO-8859-1")
    print('Selected:', motifname)

    def motif_index():
        Genome = open_file.read()
        Pattern = open_motif.read()
        k = len(Pattern)
        t = len(Genome)
        # labelfindmotifindex = Label(text="Indexes of the motif within file: " + str(starting_points)).pack(side=LEFT)
        # starting_points = [i for i in range(t - k + 1) if Genome[i:(i + k)] == Pattern]
        return [i for i in range(t - k + 1) if Genome[i:(i + k)] == Pattern]
        # return starting_points

    print(motif_index())



master = tk.Tk()
frame = Frame(master)
frame.pack()



bottomframe = Frame(master)
bottomframe.pack(side=BOTTOM)

#is required to exist in order for openfile1 to work? this is so weird
filesearchbutton = tk.Button(frame, text="File Open", command=openfile1)
filesearchbutton.pack(side=TOP)

#for the motif file
motiffilesearchbutton = tk.Button(frame, text="Motif File", command=openmotif)
motiffilesearchbutton.pack(side=TOP)

# finds the indexes of the motif in file
# returns a blank list?
runmotiffindindexbutton = Button(bottomframe, text="Run Find Motif Index ", command=lambda: open_motif())
runmotiffindindexbutton.pack(side=LEFT)

#get's gc percetage and index of gcmin and gcmax from freq list
def get_gc():
    g = 0
    c = 0
    a = 0
    t = 0
    freq = []
    for line in open_file:
        dna_file = line.rstrip("\n")
        length = len(dna_file)
        for char in line:
            # is it only doing the first character of every line?

            # i want to append the index as a key to freq and then add the gc as it's value
            if char == "g":
                g += 1
            if char == "c":
                c += 1
            if char == "a":
                a += 1
            if char == "t":
                t += 1
                gc = (g + c + 0.) / (a + t + c + g + 0.)
                freq.append(gc)
                gcmin = min(freq)
                gcmax = max(freq)
                gcminindex = freq.index(gcmin)
                gcmaxindex = freq.index(gcmax)

    label18 = Label(frame, text="number of g's " + str(g)).pack(side=TOP)
    label19 = Label(frame, text="number of c's " + str(c)).pack(side=TOP)
    label20 = Label(frame, text="number of a's " + str(a)).pack(side=TOP)
    label21 = Label(frame, text="number of t's " + str(t)).pack(side=TOP)
    label17 = Label(frame, text="gc content: " + str(gc)).pack(side=TOP)
    label22 = Label(frame, text="gc min: " + str(gcmin)).pack(side=TOP)
    label22 = Label(frame, text="gc max: " + str(gcmax)).pack(side=TOP)
    label23 = Label(frame, text="gc max index: " + str(gcmaxindex)).pack(side=TOP)
    label24 = Label(frame, text="gc min index: " + str(gcminindex)).pack(side=TOP)
    return


#should find the matching motifs in each line of file and append them to motif_list
def get_motif():
    motif_list = []
    for line in open_file:
        dna_file = line.rstrip("/n")
        length = len(dna_file)
        motif_catch = open_motif.read()
        motif = len(motif_catch)
        for char in range(len(motif_catch) - 1):
            if char == motif_catch:
                motif_list.append.index(char)
            else:
                print(motif_list)

#finds the motif at specified amounts of allowable error and length
def FrequentWordsWithMismatches(g, k, d): #class this?
 #g is genome
 #k is length
 #d is number of allowable error

    patcount = defaultdict(int)
    alphabet = "ACGT"
    allbut = {ch: tuple(c for c in alphabet if c != ch)
              for ch in alphabet}

    def inner(i, rd):
        if not rd or i == k:
            patcount["".join(base)] += 1
            return
        inner(i+1, rd)
        orig = base[i]
        for base[i] in allbut[orig]:
            inner(i+1, rd-1)
        base[i] = orig

    for i in range(len(g) - k + 1):
        base = list(g[i : i + k])
        inner(0, d)

    maxcount = max(patcount.values())
    return [p for p, c in patcount.items() if c == maxcount]

print(FrequentWordsWithMismatches('AAAAAAAAAA', 2, 1))








#this runs the get_gc function and actually works
rungcbutton = Button(bottomframe, text="Run gc", command=lambda: get_gc())
rungcbutton.pack(side=LEFT)

#this runs the get_motif function and calls an error because th etext widget doesn't work
runmotifbutton = Button(bottomframe, text="Run motif search", command=lambda: get_motif())
runmotifbutton.pack(side=LEFT)



master.mainloop()
